{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAoBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQN,EAAAY,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,QAE3EG,EAAKP,EAAAY,OAAOG,QAAQ,sBAAqCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,UAG1DA,MA7BMY,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAyBC,GACvBA,EAAMC,iBAON,IANA,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYnB,EAAKiB,EAALjB,MAAOoB,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAGvBC,EAAWC,OAAOvB,EAAMwB,OAEnBC,EAAI,EAAGA,GAAKJ,EAAOG,MAAOC,GAAK,EACtCH,GAAsBC,OAAOH,EAAKI,OAClC1B,EAAc2B,EAAGH,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onCreatePromise);\n\nfunction onCreatePromise(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  let newDelay = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    newDelay = newDelay + Number(step.value);\n    createPromise(i, newDelay);\n  }\n  \n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n      } else {\nreject(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n      }\n      \n    }, delay);\n  \n    \n  });\n\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","success","concat","failure","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","newDelay","Number","value","i"],"version":3,"file":"03-promises.d8bb4808.js.map"}